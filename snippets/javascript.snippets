snippet th
this.${0}
endsnippet

snippet log "console log" w
console.log(${0})
endsnippet

snippet er "console error" w
console.error(${0})
endsnippet

snippet deb "logger debug" w
logger.debug(${0})
endsnippet

snippet info "logger info" w
logger.info(${0})
endsnippet

snippet warn "logger warn" w
logger.warn(${0})
endsnippet

snippet err "logger error" w
logger.error(${0})
endsnippet

snippet ttl "Make selection a tagged template literal" i
\`\${${VISUAL}}\`
endsnippet

snippet tt "Wrap text for use in tagged template literal" i
\${${VISUAL}}
endsnippet

snippet rcom "React comment" i
{/* ${VISUAL} */}
endsnippet

snippet cclass
class ${1} {
	constructor() {
		${0}
	}
}
endsnippet

snippet for
for(let ${1:} = ${2:}; $1 < ${3:}; $1++) {
	${0}
}
endsnippet

snippet main
function main() {
	${0}
}
endsnippet

snippet try
try {
	${0}
} catch (e) {}
endsnippet

snippet <>
<${1:}>
	${0}
</$1>
endsnippet

snippet react
import React from 'react';

export const ${1:} = (props: {}) => {
	return (
		<div>
			${0}
		</div>
	)
};
endsnippet

snippet then
Then('${1}', function(this: World${2}) {
	${0}
});
endsnippet

snippet when
When('${1}', function(this: World${2}) {
	${0}
});
endsnippet

snippet given
Given('${1}', function(this: World${2}) {
	${0}
});
endsnippet

snippet cap
export const capitalize = (input: string): string =>
	input.charAt(0).toUpperCase() + input.slice(1);
endsnippet

snippet st
const [${1}, set${1/\w+/\u$0/}] = useState(${0});
endsnippet

snippet hvc
import React, { useState } from "react";

interface Props {}

const use$1 = (props: Props) => {
  return {
    states: {},
    callbacks: {},
    data: {},
    slots: {},
  };
};

export const $1View = (props: ReturnType<typeof use$1>) => {
  return (
    <div>${0}</div>
  );
};

export const ${1} = (props: Props) => {
  return <$1View {...use$1(props)} />;
};
endsnippet
