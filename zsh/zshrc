DEFAULT_USER="jayden"

hostname="$(hostname)"

[ -e "$HOME/.config/ENV" ] && source $HOME/.config/ENV

##########################################################
#                       completion                       #
##########################################################

unsetopt menu_complete
unsetopt flowcontrol
setopt auto_menu
setopt complete_in_word
setopt always_to_end

zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' special-dirs true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command "ps -u $USERNAME -o pid,user,comm -w -w"
zstyle ':completion:*:cd:*' tag-order local-directories directory-stack path-directories

# expand aliases with tab
zstyle ':completion:*' completer _expand_alias _complete _ignored

autoload -Uz compinit
zmodload -i zsh/complist
compinit

autoload -U +X bashcompinit && bashcompinit

##########################################################
#                        history                         #
##########################################################

HISTSIZE=2000000
HISTFILE="${XDG_STATE_HOME}/zsh/history"
SAVEHIST=2000000

setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt share_history          # share command history data

alias history='builtin fc -l 1'

##########################################################
#                       key binds                        #
##########################################################

if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init() {
    echoti smkx
  }
  function zle-line-finish() {
    echoti rmkx
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi

bindkey -e

# Start typing + [Up-Arrow] - fuzzy find history forward
autoload -U up-line-or-beginning-search
zle -N up-line-or-beginning-search
bindkey -M emacs "${terminfo[kcuu1]}" up-line-or-beginning-search

# Start typing + [Down-Arrow] - fuzzy find history backward
autoload -U down-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey -M emacs "${terminfo[kcud1]}" down-line-or-beginning-search

# [Backspace] - delete backward
bindkey -M emacs '^?' backward-delete-char
# [Ctrl-RightArrow] - move forward one word
bindkey -M emacs '^[[1;5C' forward-word
# [Ctrl-LeftArrow] - move backward one word
bindkey -M emacs '^[[1;5D' backward-word

bindkey '^r' history-incremental-search-backward
bindkey ' ' magic-space

autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

WORDCHARS=''
bindkey '^H' backward-kill-word

# unbind ctrl-s
stty stop undef
stty start undef

##########################################################
#                     personal conf                      #
##########################################################

setopt extendedglob

# Syntax highlight comments while using prompt
setopt interactivecomments

source $DOT/zsh/aliases.zsh
source $DOT/zsh/functions.zsh

# oh-my-zsh plugins (but without oh-my-zsh bloat)
source $DOT/zsh/dir.zsh
source $DOT/zsh/git.zsh
source $DOT/zsh/dotenv.zsh

# syntax highlighting, must be loaded last
if [ "$hostname" = "client-Jayden-Chan.local" ]; then
    source /opt/homebrew/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
    source "$(brew --prefix)/share/google-cloud-sdk/path.zsh.inc"
    source "$(brew --prefix)/share/google-cloud-sdk/completion.zsh.inc"
else
    source ~/.local/share/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh
    source ~/.local/share/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

if [ "$hostname" = "grace" ] || [ "$hostname" = "swift" ]; then
    eval "$(atuin init zsh --disable-up-arrow)"
fi

# initialize starship prompt
eval "$(starship init zsh)"

if [ "$IN_NIX_SHELL" = "" ]; then
    # initialize direnv
    eval "$(direnv hook zsh)"
fi

eval "$(zoxide init zsh)"

# if tmux is executable, X is running, and not inside a tmux session.
#   try attach to a detatched session. if there aren't any then create a new one
if [ -x "$(command -v tmux)" ] && [ -n "${DISPLAY}" ] && [ -z "${TMUX}" ]; then
    unattached=$(tmux ls 2>/dev/null | rg --invert-match "attached" | rg "^\d" --only-matching)
    if [ "$?" = "0" ]; then
        tmux attach -t "$unattached"
    else
        array_of_sessions=("${(@f)$(tmux ls 2>/dev/null | rg "^\d" --only-matching --replace='$0')}")
        typeset -A set_of_sessions=()
        for s in $array_of_sessions; do
            set_of_sessions["$s"]="1"
        done

        s=1
        created="0"
        for s in $array_of_sessions; do
            taken="${set_of_sessions["$s"]}"
            if [ "$taken" != "1" ]; then
                created="1"
                tmux new -s "$s"
                break
            else
                ((s++))
            fi
        done

        if [ "$created" = "0" ]; then
            tmux new -s "$s"
        fi
    fi
fi
