# Path to your oh-my-zsh installation.
export ZSH=$HOME/.oh-my-zsh
export EDITOR=nvim

# ZSH_THEME="jayden-chan"
# ZSH_THEME="norm"
DEFAULT_USER="jayden"
# prompt_context() {}
plugins=(git dotenv zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh

# initialize z
[[ -r "/usr/share/z/z.sh" ]] && source /usr/share/z/z.sh

# initialize starship prompt
eval "$(starship init zsh)"

# User configuration

stty stop undef
stty start undef

# Enable extended file globs
setopt extendedglob

# Git alias
alias gdf='cd $HOME/Documents/Git/dotfiles && git status'
alias gc='git commit -v -S'
alias gcop='git checkout production'
alias gpuu='git push -u origin $(git symbolic-ref --short HEAD)'
# Stop activating ghostscript by accident
alias gs='git status'
alias gro='cd $(git rev-parse --show-toplevel)'

# Compilation
alias lcm='latexmk -pvc -pdf'
alias god='cd ~/Dev/Go/src/github.com/jayden-chan/'
alias mb='make build'
alias hh='git push heroku master && heroku logs --tail'

# dotfile editing
alias vimrc='vim $HOME/Documents/Git/dotfiles/vim/vimrc'
alias zshrc='vim $HOME/Documents/Git/dotfiles/zsh/zshrc'

# Info
alias nfetch='neofetch --ascii_distro arch_old'

# Wifi
alias wifilist='nmcli dev wifi list'
alias wificonnect='nmcli con up'

# Work
[[ "$HOST" = "jayden-GL63-8RC" ]] && source ~/.work-aliases.sh
alias twork='tmux new-session -c $LC_PATH_DISP \; source-file ~/Documents/Git/dotfiles/tmux/work.conf'

# Exit
alias :q='exit'
alias :Q='exit'
alias :wq='exit'
alias :Wq='exit'

# Editor
alias vim='nvim'

# U S E R   E R R O R
alias cim='vim'
alias vom='vim'
alias vun='vim'
alias ivm='vim'
alias bim='vim'
alias dw='cd'
alias cs='cd'
alias clear='clear -x'
alias clera='clear'
alias celar='clear'
alias clare='clear'
alias claer='clear'
alias ckear='clear'
alias Lq='exit'

# One letter
alias l='exa -a'
alias y='yarn'
alias o='xdg-open'
alias x='xset r rate 270 35'
alias t='tmux'

# Other
alias ls='exa'
alias la='exa -lah'
alias lpackages='comm -23 <(apt-mark showmanual | sort -u) <(gzip -dc /var/log/installer/initial-status.gz | sed -n '"'"'s/^Package: //p'"'"' | sort -u)'
alias open='feh --auto-zoom'
alias op='nautilus . </dev/null &>/dev/null & disown'
alias clip='xclip -selection c'
alias myip='curl https://ipinfo.io/ip && echo'
alias nodes='node --enable-source-maps --unhandled-rejections=strict'
alias ncl='nc -l 0.0.0.0 4334'
alias sd='sudoedit'

function ta () {
    if [ -z "$1" ]; then tmux attach; else tmux attach -t $1; fi
}

function tunnel () {
    ssh -L $1:localhost:$2 $3
}

function vpn () {
    sudo openvpn --config $1 --auth-user-pass /home/jayden/Documents/pia/pass.txt
}

function installfont () {
    sudo echo --- Installing font ---
    cp $1 $HOME/.local/share/fonts
    echo --- Refreshing font cache ---
    sudo fc-cache -fv
    echo --- Done ---
}

function wifireset () {
    nmcli con down "$1" && wificonnect "$1"
}

function lpac () {
    echo --- Native ---
    echo
    pacman -Qqettn
    echo
    echo --- AUR ---
    echo
    pacman -Qqettm
}

function cargo_init() {
    if [ "$1" = "" ]; then
        echo "You must specify a project name"
    else
        cargo init $1
        cd $1
        touch README.md
        echo "# $1" > README.md

        if [ "$2" != "" ]; then
            echo "\n$2" >> README.md
        fi

        touch Makefile
        echo "build: build-skylake\n" >> Makefile
        echo "build-general:\n\tcargo build --release\n" >> Makefile
        echo "build-skylake:\n\tRUSTFLAGS=\"-Ctarget-cpu-skylake\" cargo build --release\n" >> Makefile
        echo ".PHONY: build build-general build-skylake" >> Makefile

        touch rustfmt.toml
        echo "max_width = 80" > rustfmt.toml

        touch LICENSE

        echo "Project creation finished, don't forget to add a license"
    fi
}

function ts_init() {
    if [ "$1" = "" ]; then
        echo "You must specify a project name"
    else
        mkdir $1
        cd $1
        git status >/dev/null 2>&1 || { git init }
        yarn init
        mkdir src

        echo "# $1" > README.md
        echo "function main() {\n  console.log(\"Hello world\");\n}\n\nmain();" > src/index.ts
        echo "dist\nnode_modules\n*.swp\n*.env" > .gitignore
        echo '{
  "include": ["src/**/*.ts", "src/**/*.js", "src/**/*.json"],
  "compilerOptions": {
    "resolveJsonModule": true,
    "outDir": "dist",
    "module": "commonjs",
    "lib": ["es2020"],
    "target": "ES6",
    "inlineSourceMap": true,
    "strict": true
  }
}' > tsconfig.json

        yarn add -D typescript @types/node

        if [ "$2" != "" ]; then
            echo "\n$2" >> README.md
        fi

        echo "Project created, don't forget to update package.json"
    fi

}

# try not to exit the terminal with un-pushed git commits
function exit () {
    gitlog=$(git log @{upstream}.. 2>/dev/null)
    if [[ $? -ne 0 ]]; then builtin exit; fi
    if [[ $(printf '%s' "$gitlog" | wc -c) -ne 0 ]]; then
        echo "Oops! You forgot to push your commits to the upstream repo."
        echo -n "Would you like to push them before exiting? [Y/n] "
        read answer

        if [ "$answer" != "${answer#[Yy]}" ]; then
            git push || return -1
        fi
    fi
    builtin exit
}

function pach () {
    cat /var/log/pacman.log | grep -iE 'installed|upgraded|removed' | tail -$1
}

function dev () {
    find ${@:2} -type f | entr yarn --silent $1
}

function show_tag () {
    read -r -d '' code << EOF
local awful = require("awful")
local screen = awful.screen.focused()
local tag = screen.tags[$1]
if tag then
    tag:view_only()
end
EOF

    awesome-client "$code"
}

function bgc () {
    if [ "$1" = "--help" ]; then
        echo "background command"
        echo "bgc <min seconds> <before command> <after command> <command>"
        return
    fi

    eval $2
    s_time=$SECONDS
    eval $4

    e_time=$SECONDS
    duration=$(( e_time - s_time ))

    if (( duration < $1 )); then
        sleep $(( $1 - duration ))
    fi

    eval $3
}

bindkey '^H' backward-kill-word

export DO_NOT_TRACK=1
# Opt out of .NET telemetry (yikes...)
export DOTNET_CLI_TELEMETRY_OPTOUT=1
export GATSBY_TELEMETRY_DISABLED=1

# async suggestions
export ZSH_AUTOSUGGEST_USE_ASYNC=1

# Export Go path
export GOPATH=$HOME/Dev/Go
export PATH=$HOME/Dev/Go/bin:$PATH

# Make fzf respect .gitignore
export FZF_DEFAULT_COMMAND="rg --files"

# Add cargo binaries
export PATH="$HOME/.cargo/bin:$PATH"

# Add other binaries
export PATH="$HOME/.local/bin:$PATH"

# NPM global
export PATH=~/.npm-global/bin:$PATH

# Yarn global
export PATH=~/.yarn/bin:$PATH

unset MANPATH
export MANPATH="$NPM_PATH/share/man:$(manpath)"

# Ensure GPG sign prompt shows on correct screen
export GPG_TTY=$(tty)
gpg-connect-agent updatestartuptty /bye >/dev/null

# Android studio stuff for React Native
export ANDROID_HOME=$HOME/Dev/Android
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/tools
export PATH=$PATH:$ANDROID_HOME/tools/bin
export PATH=$PATH:$ANDROID_HOME/platform-tools
