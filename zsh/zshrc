DEFAULT_USER="jayden"

hostname="$(hostname)"

# zsh-z, must be loaded before completion stuff
[[ "$hostname" != "Jaydens-MacBook-Pro.local" ]] && source $HOME/.local/share/zsh-z.plugin.zsh

##########################################################
#                       completion                       #
##########################################################

unsetopt menu_complete
unsetopt flowcontrol
setopt auto_menu
setopt complete_in_word
setopt always_to_end

zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' special-dirs true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command "ps -u $USERNAME -o pid,user,comm -w -w"
zstyle ':completion:*:cd:*' tag-order local-directories directory-stack path-directories

# expand aliases with tab
zstyle ':completion:*' completer _expand_alias _complete _ignored

autoload -Uz compinit
zmodload -i zsh/complist
compinit

autoload -U +X bashcompinit && bashcompinit

##########################################################
#                        history                         #
##########################################################

HISTSIZE=50000
SAVEHIST=10000

setopt extended_history       # record timestamp of command in HISTFILE
setopt hist_expire_dups_first # delete duplicates first when HISTFILE size exceeds HISTSIZE
setopt hist_ignore_dups       # ignore duplicated commands history list
setopt hist_ignore_space      # ignore commands that start with space
setopt hist_verify            # show command with history expansion to user before running it
setopt share_history          # share command history data

alias history='builtin fc -l 1'

##########################################################
#                       key binds                        #
##########################################################

if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init() {
    echoti smkx
  }
  function zle-line-finish() {
    echoti rmkx
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi

bindkey -e

# Start typing + [Up-Arrow] - fuzzy find history forward
autoload -U up-line-or-beginning-search
zle -N up-line-or-beginning-search
bindkey -M emacs "${terminfo[kcuu1]}" up-line-or-beginning-search

# Start typing + [Down-Arrow] - fuzzy find history backward
autoload -U down-line-or-beginning-search
zle -N down-line-or-beginning-search
bindkey -M emacs "${terminfo[kcud1]}" down-line-or-beginning-search

# [Backspace] - delete backward
bindkey -M emacs '^?' backward-delete-char
# [Ctrl-RightArrow] - move forward one word
bindkey -M emacs '^[[1;5C' forward-word
# [Ctrl-LeftArrow] - move backward one word
bindkey -M emacs '^[[1;5D' backward-word

bindkey '^r' history-incremental-search-backward
bindkey ' ' magic-space

autoload -U edit-command-line
zle -N edit-command-line
bindkey '\C-x\C-e' edit-command-line

WORDCHARS=''
bindkey '^H' backward-kill-word

# unbind ctrl-s
stty stop undef
stty start undef

##########################################################
#                     personal conf                      #
##########################################################

setopt extendedglob

# Syntax highlight comments while using prompt
setopt interactivecomments

source $DOT/zsh/aliases.zsh
source $DOT/zsh/functions.zsh

# oh-my-zsh plugins (but without oh-my-zsh bloat)
source $DOT/zsh/dir.zsh
source $DOT/zsh/git.zsh
source $DOT/zsh/dotenv.zsh

# syntax highlighting, must be loaded last
if [ "$hostname" != "Jaydens-MacBook-Pro.local" ]; then
    source /usr/share/zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
else
    source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
fi

# initialize starship prompt
eval "$(starship init zsh)"

# if tmux is executable, X is running, and not inside a tmux session.
#   try attach to a detatched session. if there aren't any then create a new one
if [ -x "$(command -v tmux)" ] && [ -n "${DISPLAY}" ] && [ -z "${TMUX}" ]; then
    unattached=$(tmux ls | rg -v "attached" | rg "^\d" --only-matching)
    [[ "$?" = "0" ]] && tmux attach -t "$unattached" || tmux
fi
