set nocompatible
filetype on

" Plugins

lua <<EOF
-- auto-bootstrap packer
local install_path = vim.fn.stdpath('data')..'/site/pack/packer/start/packer.nvim'
if vim.fn.empty(vim.fn.glob(install_path)) > 0 then
  packer_bootstrap = vim.fn.system({'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path})
end

require('packer').startup(function()
-- Use Packer itself
    use 'wbthomason/packer.nvim'

-- Theme
    use 'lukas-reineke/indent-blankline.nvim'
    use 'nvim-lualine/lualine.nvim'
    use '~/Dev/Personal/base46.nvim'

-- fs nav
    use 'nvim-lua/plenary.nvim'
    use 'TimUntersberger/neogit'
    use 'nvim-telescope/telescope.nvim'
    use 'kyazdani42/nvim-web-devicons'
    use 'kyazdani42/nvim-tree.lua'

-- Git
    use 'lewis6991/gitsigns.nvim'
    use 'tpope/vim-fugitive'
    use 'tpope/vim-rhubarb'

-- Misc
    use 'godlygeek/tabular'
    use 'editorconfig/editorconfig-vim'
    use 'christoomey/vim-tmux-navigator'
    use 'andweeb/presence.nvim'
    use 'mbbill/undotree'
    use 'tpope/vim-repeat'

-- IDE-like
    use 'neovim/nvim-lspconfig'
    use 'hrsh7th/cmp-nvim-lsp'
    use 'hrsh7th/cmp-buffer'
    use 'hrsh7th/cmp-git'
    use 'hrsh7th/cmp-path'
    use 'hrsh7th/cmp-cmdline'
    use 'hrsh7th/nvim-cmp'
    use 'quangnguyen30192/cmp-nvim-ultisnips'
    use 'onsails/lspkind-nvim'

    use 'windwp/nvim-autopairs'
    use 'tpope/vim-commentary'
    use 'tpope/vim-surround'
    use 'SirVer/ultisnips'

-- Syntax
    use {
        {'nvim-treesitter/nvim-treesitter', run = ':TSUpdate'},
        {'nvim-treesitter/nvim-treesitter-textobjects'},
        {'lewis6991/spellsitter.nvim'},
    }
    use {'plasticboy/vim-markdown', ft={'markdown'}}
    use {'lifepillar/pgsql.vim', ft = {'psql'}}
    use {'jayden-chan/timing-diagram-generator', branch = 'vim-plugin'}
    use {'jayden-chan/rust.vim', ft = {'rust'}}
    use {'baskerville/vim-sxhkdrc'}
    use {'rrethy/vim-hexokinase', run = 'make hexokinase'}
    use {'chr4/nginx.vim', ft = {'nginx'}}

if packer_bootstrap then
    require('packer').sync()
end
end)
EOF

" Behaviour

    " Theme
    syntax enable
    set encoding=UTF-8

    " 256 colors
    set t_Co=256
    set t_ut=
    set termguicolors

    " Tab settings
    set expandtab
    set shiftwidth=4
    set softtabstop=4
    set tabstop=4
    set smarttab
    set smartindent

    " Search settings
    set gdefault           " Global by default
    set ignorecase         " Ignore case
    set smartcase          " Override ignorecase if search contains capitals
    set incsearch          " Search incrementally
    set nohls              " Don't highlight after Enter is pressed
    set inccommand=nosplit " Show find/replace as it is typed

    " Open new splits on the right
    set splitright

    " Fold settings
    set foldlevel=1000
    set foldmethod=indent

    set undolevels=9001
    set cursorline

    " Wrap
    set wrap

    " No command bar
    set noshowmode

    " Hide ugly completion messages
    set shortmess+=c

    " Leave signcolumn on so it's not toggling all the time
    set signcolumn=yes

    " Don't let the cursor reach the top/bottom 8 lines of text
    set scrolloff=8

    " Don't automatically update working dir
    set noautochdir

    " Completion menu settings
    set completeopt=menu,menuone,noselect

    " unload and delete the buffer once there are no more
    " windows referencing it
    set nohidden

    " Unix file line endings
    set fileformat=unix

    " Enable mouse
    set mouse=a

    " Change cursor to bar and underscore for different modes
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"

" Binds

    " Leader
    let mapleader = "\<Space>"

    " Relative line number toggle, toggle w/ F9
    set number relativenumber
    map <F9> <Esc>:set rnu!<CR>

    " Reload vimrc
    map <leader>ss :so $MYVIMRC<CR>

    " Map Ctrl-s to save
    nmap <c-s> :wa<CR>
    imap <c-s> <Esc>:wa<CR>

    " 'very magic' mode by default
    nnoremap / /\v
    vnoremap / /\v
    cnoremap s/ s/\v

    " Spell check
    map <F6> :setlocal spell! spelllang=en_us<CR>
    set spellfile=$HOME/.config/dotfiles/vim/en.utf-8.add
    " ctrl-o corrects previous spelling mistake while in insert mode
    inoremap <c-o> <c-g>u<Esc>[s1z=`]a<c-g>u

    " Make Esc work in terminal mode
    tnoremap <Esc> <C-\><C-n>

    " Formatting (remove whitespace and reindent)
    noremap <leader>ww :%s/\s\+$//e<CR>
    noremap <silent> <leader>ta :Tabularize /<bar><CR>

    " Close quickfix/preview/location
    noremap <silent> <c-q> :ccl<bar>pcl<bar>lcl<CR>

    " Fuzzy finding
    nnoremap <silent> <leader>f <cmd>lua require('telescope.builtin').find_files()<cr>
    nnoremap <silent> <leader>r <cmd>lua require('telescope.builtin').live_grep()<cr>
    nnoremap <silent> <leader>b <cmd>lua require('telescope.builtin').buffers()<cr>
    nnoremap <silent> <leader>hh <cmd>lua require('telescope.builtin').help_tags()<cr>
    nnoremap <silent> <leader>n <cmd>lua require('telescope.builtin').lsp_references()<cr>
    nnoremap <silent> <leader>z <cmd>lua require('telescope.builtin').spell_suggest()<cr>

    " Undo tree
    nnoremap <silent> <leader>U :UndotreeToggle<CR>

    " Remap cursor movement keys because I'm a scrub and don't use the default
    noremap h i
    noremap j h
    noremap k gj
    noremap i gk

    " Various other cursor control maps
    nnoremap L g$
    nnoremap J g^
    vnoremap L $
    vnoremap J ^
    nnoremap I 12<c-u>
    nnoremap K 12<c-d>
    vnoremap I 12<up>
    vnoremap K 12<down>
    nnoremap U J

    " Make X and Y behave like C and D
    nnoremap Y y$
    nnoremap X v$<Left>"_x

    " Move the cursor more easily while in insert mode
    inoremap <c-j> <Left>
    inoremap <c-l> <Right>

    " Easily resize splits
    nnoremap <leader>j :vertical resize +5<CR>
    nnoremap <leader>k :resize +2<CR>
    nnoremap <leader>i :resize -2<CR>
    nnoremap <leader>l :vertical resize -5<CR>

    " Make c-p function like c-i since c-i was previously remapped
    nnoremap <c-p> <c-i>

    " <leader><leader> toggles between buffers
    nnoremap <leader><leader> <c-^>

    " Disable Ex mode
    map q: <nop>
    map Q <nop>

    " New line no insert mode
    map go o<Esc>

    " Copy Paste etc from system clipboard
    map <silent> <leader>p "+p
    map <silent> <leader>y "+y

    " Delete line without filling yank buffer
    nnoremap <silent> <leader>dd "_dd
    vnoremap <silent> <leader>dd "_dd

    " Prevent x and c from filling buffer
    noremap x "_x
    noremap c "_c
    noremap cc "_cc

    " Tab switching
    nmap <silent> <tab>j :tabprevious<CR>
    nmap <silent> <tab>l :tabnext<CR>

    " Fix 'I' behaviour in V-block
    vnoremap H I

    " Toggle highlight search
    map <silent> <leader>h :set hls!<CR>

" Plugin specific settings

    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"

    let g:Hexokinase_optInPatterns = [
    \   'full_hex',
    \   'triple_hex',
    \   'rgb',
    \   'rgba',
    \   'hsl',
    \   'hsla',
    \ ]

    " nvim-tree
    nnoremap <silent> <C-n> :NvimTreeToggle<CR>
    highlight NvimTreeIndentMarker guifg='#665c54'

    let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
    autocmd FileType gitcommit,text,markdown,tex let b:EditorConfig_disable = 1

    " LSP auto formatting stuff
    command! -nargs=0 AutoFormat :lua vim.lsp.buf.formatting_sync()
    autocmd FileType c,cpp,go autocmd BufWritePre <buffer> AutoFormat
    autocmd FileType javascript,typescript,javascriptreact,typescriptreact autocmd BufWritePre <buffer> AutoFormat
    autocmd FileType css,scss,json,html,graphql autocmd BufWritePre <buffer> AutoFormat

    command! -nargs=0 TSOrganizeImports :lua vim.lsp.buf.execute_command({command = "_typescript.organizeImports", arguments = {vim.fn.expand("%:p")}})

    let g:rustfmt_autosave = 1
    let g:sql_type_default = 'pgsql'

    let g:tex_flavor="latex"
    let g:tex_conceal = ''
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_conceal_code_blocks = 0

    " Tmux
    let g:tmux_navigator_no_mappings = 1
    nnoremap <silent> <M-j> :TmuxNavigateLeft<cr>
    nnoremap <silent> <M-k> :TmuxNavigateDown<cr>
    nnoremap <silent> <M-i> :TmuxNavigateUp<cr>
    nnoremap <silent> <M-l> :TmuxNavigateRight<cr>

" Commands

    " Make leaving easier in case of typos
    command! -bang Q :q<bang>
    command! Wq :wq
    command! WQ :wq
    command! Wqa :wqa
    command! WQa :wqa
    command! WQA :wqa
    command! -bang Qa :qa<bang>
    command! -bang QA :qa<bang>

    command! RustDocs :silent !rustup doc --std

    " Enable spell check for certain file types
    autocmd FileType gitcommit,text,markdown,tex,cucumber setlocal spell

    " Set a max line length for Markdown files
    autocmd FileType markdown setlocal textwidth=89
    autocmd FileType markdown setlocal colorcolumn=90

    " Set indentation to 2 spaces for certain files
    autocmd FileType javascript,typescript,typescriptreact,html,scss,css,less,json,toml,sql,yml,yaml,groovy,graphql,cpp setlocal shiftwidth=2
    autocmd FileType javascript,typescript,typescriptreact,html,scss,css,less,json,toml,sql,yml,yaml,groovy,graphql,cpp setlocal softtabstop=2

    " Enter insert mode automatically when entering terminal
    autocmd BufWinEnter,WinEnter term://* startinsert

    " Jump to last known cursor position when opening files
    autocmd BufReadPost * if &filetype != "gitcommit" && line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

    autocmd BufRead,BufNewFile Jenkinsfile setf groovy
    autocmd BufRead,BufNewFile *.graphql setf graphql

    " Set indentation to hard tabs for some files
    autocmd FileType snippets,go setlocal tabstop=4
    autocmd FileType snippets,go setlocal shiftwidth=4
    autocmd FileType asm         setlocal shiftwidth=8
    autocmd FileType asm         setlocal expandtab
    autocmd FileType go          setlocal noexpandtab
    autocmd FileType makefile    setlocal noexpandtab

" Abbreviations

    iab retrun    return
    iab rerturn   return
    iab rertrun   return
    iab retnru    return
    iab retunr    return
    iab erturn    return
    iab ertnru    return
    iab thsi      this
    iab fcuntoin  function
    iab functoin  function
    iab fucntion  function
    iab funcotin  function
    iab funcoitn  function
    iab funciton  function
    iab funciotn  function
    iab fcuntion  function
    iab fynction  function
    iab fuynction function
    iab versoin   version
    iab veison    version
    iab vreison   version
    iab vierson   version
    iab costn     const
    iab conts     const
    iab csont     const
    iab cosnt     const
    iab asunyc    async
    iab ascyn     async
    iab asunc     async
    iab asuyuc    async
    iab THe       The
    iab THis      This
    iab !+        !=
    iab +>        =>

" Lua plugins config

lua <<EOF

---     ---
--- LSP ---
---     ---

-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
vim.api.nvim_set_keymap('n', '<leader>H', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
vim.api.nvim_set_keymap('n', '[e', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
vim.api.nvim_set_keymap('n', ']e', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_key(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  buf_key('n', '<leader>o', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_key('n', '<leader>O', '<cmd>vs<CR><cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_key('n', '<leader>g', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_key('n', '<leaderR', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_key('n', '<leader>e', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_key('n', '<leader>F', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

local signs = { Error = " ", Warn = " ", Hint = " ", Info = " " }
for type, icon in pairs(signs) do
  local hl = "DiagnosticSign" .. type
  vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
end

vim.diagnostic.config({
  virtual_text = {
    severity = vim.diagnostic.severity.ERROR
  },
  signs = true,
  underline = true,
  update_in_insert = false,
  severity_sort = false,
})

---            ---
--- auto pairs ---
---            ---
require('nvim-autopairs').setup({
  ignored_next_char = ""
})

---        ---
--- neogit ---
---        ---
local neogit = require('neogit')
neogit.setup({
  disable_commit_confirmation = true,
})

---             ---
--- completions ---
---             ---
local cmp = require('cmp')
local lspkind = require('lspkind')
local kind_icons = {
  Text = "",
  Method = "",
  Function = "",
  Constructor = "",
  Field = "ﰠ",
  Variable = "",
  Class = "ﴯ",
  Interface = "",
  Module = "",
  Property = "ﰠ",
  Unit = "塞",
  Value = "",
  Enum = "",
  Keyword = "",
  Snippet = "",
  Color = "",
  File = "",
  Reference = "",
  Folder = "",
  EnumMember = "",
  Constant = "",
  Struct = "פּ",
  Event = "",
  Operator = "",
  TypeParameter = ""
}

cmp.setup({
  snippet = {
    expand = function(args)
      vim.fn["UltiSnips#Anon"](args.body)
    end,
  },
  preselect = cmp.PreselectMode.None,
  formatting = {
    format = function(entry, vim_item)
      -- Kind icons
      vim_item.kind = string.format('%s %s', kind_icons[vim_item.kind], vim_item.kind) -- This concatonates the icons with the name of the item kind
      -- Source
      vim_item.menu = ({
        nvim_lsp = "[LSP]",
        ultisnips = "[UltiSnips]",
        buffer = "[Buffer]",
        cmp_git = "[Git]",
        path = "[Path]",
      })[entry.source.name]
      return vim_item
    end
  },
  mapping = cmp.mapping.preset.insert({
    -- Enter immediately completes. C-n/C-p to select.
    ['<CR>'] = cmp.mapping.confirm({ select = false })
  }),
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'ultisnips' },
    { name = 'path' },
  }, {
    { name = 'buffer' },
  })
})

-- Set configuration for specific filetype.
cmp.setup.filetype('gitcommit', {
  sources = cmp.config.sources({
    { name = 'cmp_git' },
  }, {
    { name = 'buffer' },
  })
})

-- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline('/', {
  sources = {
    { name = 'buffer' }
  }
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
  sources = cmp.config.sources({
    { name = 'path' }
  }, {
    { name = 'cmdline' }
  })
})

-- Setup lspconfig.
local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
local lspconfig = require('lspconfig')

---                       ---
--- Language Server Setup ---
---                       ---
lspconfig.tsserver.setup({
  capabilities = capabilities,
  on_attach = function(client, bufnr)
    client.resolved_capabilities.document_formatting = false
    on_attach(client, bufnr)
  end,
  flags = {
    debounce_text_changes = 150,
  }
})

local prettier = {{formatCommand = 'prettierd "${INPUT}"', formatStdin = true}}

lspconfig.efm.setup({
  capabilities = capabilities,
  on_attach = on_attach,
  flags = {
    debounce_text_changes = 150,
  },
  init_options = {documentFormatting = true},
  filetypes = {
      'javascript',
      'typescript',
      'javascriptreact',
      'typescriptreact',
      'html',
      'css',
      'scss',
      'less',
      'graphql',
      'markdown',
      'yaml',
      'json'
  },
  settings = {
      rootMarkers = {".git/"},
      languages = {
        javascript = prettier,
        typescript = prettier,
        javascriptreact = prettier,
        typescriptreact = prettier,
        html = prettier,
        css = prettier,
        scss = prettier,
        less = prettier,
        graphql = prettier,
        markdown = prettier,
        yaml = prettier,
        json = prettier
      }
  }
})

lspconfig.gopls.setup({
  capabilities = capabilities,
  on_attach = on_attach,
  flags = {
    debounce_text_changes = 150,
  }
})

lspconfig.clangd.setup({
  capabilities = capabilities,
  on_attach = on_attach,
  flags = {
    debounce_text_changes = 150,
  }
})

lspconfig.rust_analyzer.setup({
  capabilities = capabilities,
  on_attach = on_attach,
  flags = {
    debounce_text_changes = 150,
  },
  settings = {
    ["rust-analyzer"] = {
      cargo = {
        allFeatures = true,
      },
      completion = {
        postfix = {
          enable = false,
        },
      },
    },
  }
})

---            ---
--- Treesitter ---
---            ---
require('nvim-treesitter.configs').setup({
  ensure_installed = {
    "bash",
    "c",
    "cpp",
    "css",
    "dockerfile",
    "go",
    "graphql",
    "java",
    "javascript",
    "python",
    "rust",
    "toml",
    "tsx",
    "typescript",
    "yaml",
  },
  highlight = {
    enable = true,
    additional_vim_regex_highlighting = false,
  },
  indent = {
    enable = true,
  },
   incremental_selection = {
    enable = true,
    keymaps = {
      init_selection = "gnn",
      node_incremental = "grn",
      scope_incremental = "grc",
      node_decremental = "grm",
    },
  },
})
require('spellsitter').setup()
require('nvim-treesitter.configs').setup({
  textobjects = {
    swap = {
      enable = true,
      swap_next = {
        ["<leader>a"] = "@parameter.inner",
      },
      swap_previous = {
        ["<leader>A"] = "@parameter.inner",
      },
    },
    select = {
      enable = true,
      lookahead = true,
      keymaps = {
        -- You can use the capture groups defined in textobjects.scm
        ["af"] = "@function.outer",
        ["hf"] = "@function.inner",
        ["ab"] = "@block.outer",
        ["hb"] = "@block.inner",
      },
    },
  },
})

---                  ---
--- Discord Presence ---
---                  ---
require('presence'):setup({
    -- General options
    auto_update         = true,
    neovim_image_text   = "extensible Vim-based text editor",
    main_image          = "neovim",
    client_id           = "793271441293967371",
    log_level           = nil,
    debounce_timeout    = 10,
    enable_line_number  = false,
    blacklist           = {},
    buttons             = false,
    file_assets         = {},

    editing_text        = "Editing %s",
    file_explorer_text  = "Browsing file tree",
    git_commit_text     = "Writing a Git commit",
    plugin_manager_text = "Managing plugins",
    reading_text        = "Reading %s",
    workspace_text      = "Working on %s",
    line_number_text    = "Line %s/%s",
})

---           ---
--- nvim-tree ---
---           ---
local tree_cb = require('nvim-tree.config').nvim_tree_callback
require('nvim-tree').setup({
  disable_netrw       = true,
  hijack_netrw        = true,
  open_on_setup       = false,
  ignore_ft_on_setup  = {},
  open_on_tab         = false,
  update_to_buf_dir   = {
    enable = true,
    auto_open = true,
  },
  hijack_cursor       = false,
  update_cwd          = false,
  renderer = {
    group_empty = true,
    indent_markers = {
      enable = true,
      icons = {
        corner = "└ ",
        edge = "│ ",
        none = "  ",
      },
    },
    icons = {
      webdev_colors = true,
      git_placement = "before",
    }
  },
  filters = {
    dotfiles = true,
    custom   = {
      '^\\.git$',
      '^node_modules$',
      '^dist$',
      '^package-lock\\.json$',
      '^yarn\\.lock$',
      '^target$',
      '^Cargo.lock$',
    },
  },
  update_focused_file = {
    enable      = false,
    update_cwd  = false,
    ignore_list = {}
  },
  system_open = {
    cmd  = nil,
    args = {}
  },
  view = {
    width = 35,
    height = 30,
    side = 'left',
    auto_resize = false,
    mappings = {
      custom_only = true,
      list = {
        { key = {"<CR>", "o"}, cb = tree_cb("edit") },
        { key = "C",           cb = tree_cb("cd") },
        { key = "<C-v>",       cb = tree_cb("vsplit") },
        { key = "s"    ,       cb = tree_cb("vsplit") },
        { key = "<C-x>",       cb = tree_cb("split") },
        { key = "<C-t>",       cb = tree_cb("tabnew") },
        { key = "<",           cb = tree_cb("prev_sibling") },
        { key = ">",           cb = tree_cb("next_sibling") },
        { key = "U",           cb = tree_cb("parent_node") },
        { key = "x",           cb = tree_cb("close_node") },
        { key = "<Tab>",       cb = tree_cb("preview") },
        { key = "J",           cb = tree_cb("last_sibling") },
        { key = "H",           cb = tree_cb("toggle_dotfiles") },
        { key = "r",           cb = tree_cb("refresh") },
        { key = "a",           cb = tree_cb("create") },
        { key = "D",           cb = tree_cb("remove") },
        { key = "R",           cb = tree_cb("rename") },
        { key = "<C-r>",       cb = tree_cb("full_rename") },
        { key = "d",           cb = tree_cb("cut") },
        { key = "c",           cb = tree_cb("copy") },
        { key = "p",           cb = tree_cb("paste") },
        { key = "y",           cb = tree_cb("copy_name") },
        { key = "Y",           cb = tree_cb("copy_path") },
        { key = "gy",          cb = tree_cb("copy_absolute_path") },
        { key = "[c",          cb = tree_cb("prev_git_item") },
        { key = "]c",          cb = tree_cb("next_git_item") },
        { key = "u",           cb = tree_cb("dir_up") },
        { key = "q",           cb = tree_cb("close") },
        { key = "g?",          cb = tree_cb("toggle_help") },
      }
    }
  }
})

---               ---
--- gitsigns.nvim ---
---               ---
require('gitsigns').setup({
  on_attach = function(bufnr)
    local gs = package.loaded.gitsigns

    local function map(mode, l, r, opts)
      opts = opts or {}
      opts.buffer = bufnr
      vim.keymap.set(mode, l, r, opts)
    end

    -- Navigation
    map('n', ']c', function()
      if vim.wo.diff then return ']c' end
      vim.schedule(function() gs.next_hunk() end)
      return '<Ignore>'
    end, {expr=true})

    map('n', '[c', function()
      if vim.wo.diff then return '[c' end
      vim.schedule(function() gs.prev_hunk() end)
      return '<Ignore>'
    end, {expr=true})

    -- Actions
    map({'n', 'v'}, '<leader>u', ':Gitsigns reset_hunk<CR>')
    map('n', '<leader>hR', gs.reset_buffer)
    map('n', '<leader>q', gs.preview_hunk)
    map('n', '<leader>hb', function() gs.blame_line{full=true} end)
    map('n', '<leader>tb', gs.toggle_current_line_blame)

    -- Text object
    map({'o', 'x'}, 'hh', ':<C-U>Gitsigns select_hunk<CR>')
  end
})

---                  ---
--- indent_blankline ---
---                  ---
require('indent_blankline').setup({
    show_current_context = false,
    show_current_context_start = false,
})

---           ---
--- telescope ---
---           ---
require('telescope').setup({
  defaults = {
    layout_strategy = 'vertical',
    layout_config = {
      vertical = { width = 0.8 }
    },
    mappings = {
      i = {
        ["<esc>"] = require('telescope.actions').close,
      },
    },
  }
})

---        ---
--- base46 ---
---        ---
local present, base46 = pcall(require, 'base46')
if not present then
   return
end
local theme = 'gruvchad'
local color_base = 'base46'
local theme_opts = {
   base = color_base,
   theme = theme,
   transparency = false,
}
base46.load_theme(theme_opts)
local colors = base46.get_colors(color_base, theme)

---         ---
--- lualine ---
---         ---
local function diff_source()
  local gitsigns = vim.b.gitsigns_status_dict
  if gitsigns then
    return {
      added = gitsigns.added,
      modified = gitsigns.changed,
      removed = gitsigns.removed
    }
  end
end

local function trailing_whitespace()
    local space = vim.fn.search([[\s\+$]], 'nwc')
    return space ~= 0 and "TW:"..space or ""
end

local function mix_indent()
  local space_pat = [[\v^ +]]
  local tab_pat = [[\v^\t+]]
  local space_indent = vim.fn.search(space_pat, 'nwc')
  local tab_indent = vim.fn.search(tab_pat, 'nwc')
  local mixed = (space_indent > 0 and tab_indent > 0)
  local mixed_same_line

  if not mixed then
    mixed_same_line = vim.fn.search([[\v^(\t+ | +\t)]], 'nwc')
    mixed = mixed_same_line > 0
  end

  if not mixed then return '' end

  if mixed_same_line ~= nil and mixed_same_line > 0 then
     return 'MI:'..mixed_same_line
  end

  local space_indent_cnt = vim.fn.searchcount({pattern=space_pat, max_count=1e3}).total
  local tab_indent_cnt =  vim.fn.searchcount({pattern=tab_pat, max_count=1e3}).total

  if space_indent_cnt > tab_indent_cnt then
    return 'MI:'..tab_indent
  else
    return 'MI:'..space_indent
  end
end

require('lualine').setup({
  options = {
    icons_enabled = true,
    theme = base46.get_lualine_theme('base46', theme),
    component_separators = { left = '', right = ''},
    section_separators = { left = '', right = ''},
    always_divide_middle = true,
    globalstatus = false,
  },
  sections = {
    lualine_a = {'mode'},
    lualine_b = {{'b:gitsigns_head', icon = ''}, {'diff', source = diff_source}, 'diagnostics'},
    lualine_c = {'filename'},
    lualine_x = {'encoding', 'fileformat'},
    lualine_y = {'filetype'},
    lualine_z = {
        'location',
        {trailing_whitespace, color = {bg = colors.red}},
        {mix_indent, color = {bg = colors.red}}
    }
  },
  inactive_sections = {
    lualine_a = {},
    lualine_b = {},
    lualine_c = {'filename'},
    lualine_x = {},
    lualine_y = {},
    lualine_z = {}
  },
  tabline = {},
  extensions = {'nvim-tree', 'fugitive'}
})
EOF
