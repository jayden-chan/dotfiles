set nocompatible

filetype off

" Plugins

    " Auto install vim-plugged if not already installed
    let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
    if empty(glob(data_dir . '/autoload/plug.vim'))
        silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif

    call plug#begin('~/.local/share/nvim/plugged')

    " Theme
        Plug 'jayden-chan/gruvbox'
        Plug 'Yggdroot/indentline'
        Plug 'vim-airline/vim-airline'

    " fs nav
        Plug 'junegunn/fzf.vim'
        Plug 'junegunn/fzf'
        Plug 'kyazdani42/nvim-web-devicons'
        Plug 'kyazdani42/nvim-tree.lua'
        Plug 'airblade/vim-rooter'

    " Git
        Plug 'airblade/vim-gitgutter'
        Plug 'tpope/vim-fugitive'
        Plug 'tpope/vim-rhubarb'

    " Misc
        Plug 'godlygeek/tabular'
        Plug 'editorconfig/editorconfig-vim'
        Plug 'christoomey/vim-tmux-navigator'
        Plug 'andweeb/presence.nvim'

    " IDE-like
        Plug 'neovim/nvim-lspconfig'
        Plug 'hrsh7th/cmp-nvim-lsp'
        Plug 'hrsh7th/cmp-buffer'
        Plug 'hrsh7th/cmp-git'
        Plug 'hrsh7th/cmp-path'
        Plug 'hrsh7th/cmp-cmdline'
        Plug 'hrsh7th/nvim-cmp'
        Plug 'quangnguyen30192/cmp-nvim-ultisnips'

        Plug 'jiangmiao/auto-pairs'
        Plug 'tpope/vim-commentary'
        Plug 'tpope/vim-surround'
        Plug 'SirVer/ultisnips'

    " Syntax
        Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
        Plug 'plasticboy/vim-markdown'
        Plug 'lifepillar/pgsql.vim'
        Plug 'jayden-chan/timing-diagram-generator', { 'branch': 'vim-plugin' }
        " Plug '~/Dev/Personal/timing-diagram-generator'
        Plug 'jayden-chan/rust.vim'
        Plug 'baskerville/vim-sxhkdrc'
        Plug 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }
        Plug 'mustache/vim-mustache-handlebars'
        Plug 'arrufat/vala.vim'
        Plug 'towolf/vim-helm'
        Plug 'chr4/nginx.vim'

    call plug#end()

" Behaviour

    " Theme
    syntax enable
    set encoding=UTF-8

    " 256 colors
    set t_Co=256
    set t_ut=
    set termguicolors

    set guifont=JetBrainsMono\ Nerd\ Font\ Mono:h12

    " Set dark gruvbox theme
    set background=dark

    " gruvbox settings
    let g:gruvbox_contrast_dark='hard'
    let g:gruvbox_sign_column='bg0'
    let g:gruvbox_italic=1
    let g:gruvbox_bold=1
    let g:gruvbox_underline=1
    let g:gruvbox_invert_selection=0
    let g:gruvbox_italicize_strings=1

    colorscheme gruvbox

    " Tab settings
    set expandtab
    set shiftwidth=4
    set softtabstop=4
    set tabstop=4
    set smarttab
    set smartindent

    " Use backspace
    set backspace=indent,eol,start

    " Search settings
    set gdefault           " Global by default
    set ignorecase         " Ignore case
    set smartcase          " Override ignorecase if search contains capitals
    set incsearch          " Search incrementally
    set nohls              " Don't highlight after Enter is pressed
    set inccommand=nosplit " Show find/replace as it is typed

    " Open new splits on the right
    set splitright

    " Fold settings
    set foldlevel=1000
    set foldmethod=indent

    set undolevels=9001
    set cursorline

    " Wrap
    set wrap

    " No command bar
    set noshowmode

    " Hide ugly completion messages
    set shortmess+=c

    " Set git-gutter column to always on
    set signcolumn=yes

    " Don't let the cursor reach the top/bottom 8 lines of text
    set scrolloff=8

    " Don't automatically update working dir
    set noautochdir

    " Don't open preview windows
    set completeopt=menu,menuone,noselect

    " unload and delete the buffer once there are no more
    " windows referencing it
    set nohidden

    " Set .tex files to LaTeX syntax
    let g:tex_flavor="latex"

    " Unix file line endings
    set fileformat=unix

    " Enable mouse
    set mouse=a

    " Make LaTeX live preview & gitgutter smoother
    set updatetime=300

    " Change cursor to bar and underscore for different modes
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"

" Binds

    " Leader
    let mapleader = "\<Space>"

    " Relative line number toggle, toggle w/ F9
    set number relativenumber
    map <F9> <Esc>:set rnu!<CR>

    " Reload vimrc
    map <leader>ss :so $MYVIMRC<CR>

    " Map Ctrl-s to save
    nmap <c-s> :wa<CR>
    imap <c-s> <Esc>:wa<CR>

    " Spell check
    map <F6> :setlocal spell! spelllang=en_us<CR>
    set spellfile=$HOME/.config/dotfiles/vim/en.utf-8.add
    inoremap <c-o> <c-g>u<Esc>[s1z=`]a<c-g>u

    " Make Esc work in terminal mode, but not for fzf or rg
    tnoremap <Esc> <C-\><C-n>
    autocmd FileType fzf tnoremap <buffer> <Esc> <Esc>

    " ez semicolons & commas (perhaps the greatest binds in this entire config)
    inoremap ;; <Esc>A;
    nnoremap ;; <Esc>A;<Esc>
    inoremap ,, <Esc>A,
    nnoremap ,, <Esc>A,<Esc>

    " Formatting (remove whitespace and reindent)
    noremap <leader>ww :%s/\s\+$//e<CR>
    noremap <leader>tt mtgg=G`tzz
    noremap <silent> <leader>ta :Tabularize /<bar><CR>

    " Close quickfix/preview/location
    noremap <silent> <c-q> :ccl<bar>pcl<bar>lcl<CR>

    " Fuzzy finding
    nnoremap <silent> <leader>f :FZ<CR>
    nnoremap <silent> <leader>r :Rg<CR>
    nnoremap <silent> <leader>b :Buffers<CR>

    " Remap cursor movement keys because I'm a scrub and don't use the default
    noremap h i
    noremap j h
    noremap k gj
    noremap i gk

    " Various other cursor control maps
    nnoremap L g$
    nnoremap J g^
    vnoremap L $
    vnoremap J ^
    nnoremap I 12<c-u>
    nnoremap K 12<c-d>
    vnoremap I 12<up>
    vnoremap K 12<down>
    nnoremap U J

    " Make X and Y behave like C and D
    nnoremap Y y$
    nnoremap X v$<Left>"_x

    " Open a new terminal window
    nnoremap <silent> <leader>e :below new<bar>terminal<CR>

    " F10 shows the color group of the symbol below the cursor
    map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
    \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
    \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

    " Move the cursor more easily while in insert mode
    inoremap <c-j> <Left>
    inoremap <c-l> <Right>

    " Easily resize splits
    nnoremap <leader>j :vertical resize +5<CR>
    nnoremap <leader>k :resize +2<CR>
    nnoremap <leader>i :resize -2<CR>
    nnoremap <leader>l :vertical resize -5<CR>

    " Make c-p function like c-i since c-i was previously remapped
    nnoremap <c-p> <c-i>

    " <leader><leader> toggles between buffers
    nnoremap <leader><leader> <c-^>

    " Disable Ex mode
    map q: <nop>
    map Q <nop>

    " New line no insert mode
    map go o<Esc>

    " Copy Paste etc from system clipboard
    map <silent> <leader>p "+p
    map <silent> <leader>y "+y

    " Delete line without filling yank buffer
    nnoremap <silent> <leader>dd "_dd
    vnoremap <silent> <leader>dd "_dd

    " Prevent x and c from filling buffer
    noremap x "_x
    noremap c "_c
    noremap cc "_cc

    " Tab switching
    nmap <silent> <tab>j :tabprevious<CR>
    nmap <silent> <tab>l :tabnext<CR>

    " Fix 'I' behaviour in V-block
    vnoremap H I

    " Toggle highlight search
    map <silent> <leader>h :set hls!<CR>

" Plugin specific settings

    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"

    let g:airline_powerline_fonts = 1
    let g:airline_section_c = '%t'
    let g:airline_left_sep = ''
    let g:airline_right_sep = ''

    nnoremap <silent> <C-n> :NvimTreeToggle<CR>
    highlight NvimTreeIndentMarker guifg='#665c54'
    let g:nvim_tree_group_empty = 1
    let g:nvim_tree_indent_markers = 1

    let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
    au FileType gitcommit,text,markdown,tex let b:EditorConfig_disable = 1

    command! -nargs=0 AutoFormat :lua vim.lsp.buf.formatting_sync()
    autocmd FileType c,cpp,go autocmd BufWritePre <buffer> AutoFormat

    autocmd FileType javascript,typescript,javascriptreact,typescriptreact autocmd BufWritePre <buffer> AutoFormat
    autocmd FileType css,scss,json,html,graphql autocmd BufWritePre <buffer> AutoFormat

    command! -nargs=0 TSOrganizeImports :lua vim.lsp.buf.execute_command({command = "_typescript.organizeImports", arguments = {vim.fn.expand("%:p")}})

    let g:rooter_patterns = ['.git']
    let g:rooter_manual_only = 1

    let g:gitgutter_map_keys = 0

    nnoremap <silent> ]c :GitGutterNextHunk<CR>
    nnoremap <silent> [c :GitGutterPrevHunk<CR>
    nnoremap <leader>u   :GitGutterUndoHunk<CR>
    nnoremap <silent> <leader>q :GitGutterPreviewHunk<CR>

    let g:indentLine_char = '│'

    let g:rustfmt_autosave = 1

    " Make ripgrep fzf search ignore text from filenames (why isn't this the default...?)
    command! -bang -nargs=* Rg call
                \ fzf#vim#grep(
                \"rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>),
                \1,
                \{'options': '--delimiter : --nth 4..'},
                \<bang>0
                \)

    let g:sql_type_default = 'pgsql'

    let g:tex_conceal = ''
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_conceal_code_blocks = 0

    let g:tmux_navigator_no_mappings = 1

    nnoremap <silent> <M-j> :TmuxNavigateLeft<cr>
    nnoremap <silent> <M-k> :TmuxNavigateDown<cr>
    nnoremap <silent> <M-i> :TmuxNavigateUp<cr>
    nnoremap <silent> <M-l> :TmuxNavigateRight<cr>

" Commands

    " Make leaving easier in case of typos
    command! -bang Q :q<bang>
    command! Wq :wq
    command! WQ :wq
    command! Wqa :wqa
    command! WQa :wqa
    command! WQA :wqa
    command! -bang Qa :qa<bang>
    command! -bang QA :qa<bang>

    command! RustDocs :silent !rustup doc --std

    " Enable spell check for certain file types
    autocmd FileType gitcommit,text,markdown,tex,cucumber setlocal spell

    " Set a max line length for Markdown files
    autocmd FileType markdown setlocal textwidth=89
    autocmd FileType markdown setlocal colorcolumn=90

    " Set indentation to 2 spaces for certain files
    autocmd FileType javascript,typescript,typescriptreact,html,scss,css,less,json,toml,sql,yml,yaml,groovy,graphql setlocal shiftwidth=2
    autocmd FileType javascript,typescript,typescriptreact,html,scss,css,less,json,toml,sql,yml,yaml,groovy,graphql setlocal softtabstop=2

    " Enter insert mode automatically when entering terminal
    autocmd BufWinEnter,WinEnter term://* startinsert

    " Jump to last known cursor position when opening files
    autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

    au BufRead,BufNewFile Jenkinsfile setf groovy
    au BufRead,BufNewFile *.graphql setf graphql

    " Set indentation to hard tabs for some files
    autocmd FileType snippets,go setlocal tabstop=4
    autocmd FileType snippets,go setlocal shiftwidth=4
    autocmd FileType asm         setlocal shiftwidth=8
    autocmd FileType asm         setlocal expandtab
    autocmd FileType go          setlocal noexpandtab
    autocmd FileType makefile    setlocal noexpandtab

" Abbreviations

    iab retrun    return
    iab rerturn   return
    iab rertrun   return
    iab retnru    return
    iab retunr    return
    iab erturn    return
    iab ertnru    return
    iab thsi      this
    iab fcuntoin  function
    iab functoin  function
    iab fucntion  function
    iab funcotin  function
    iab funcoitn  function
    iab funciton  function
    iab funciotn  function
    iab fcuntion  function
    iab fynction  function
    iab fuynction function
    iab versoin   version
    iab veison    version
    iab vreison   version
    iab vierson   version
    iab costn     const
    iab conts     const
    iab csont     const
    iab cosnt     const
    iab asunyc    async
    iab ascyn     async
    iab asunc     async
    iab asuyuc    async
    iab THe       The
    iab THis      This
    iab !+        !=
    iab +>        =>

" Lua plugins config

lua <<EOF

---     ---
--- LSP ---
---     ---

-- See `:help vim.diagnostic.*` for documentation on any of the below functions
local opts = { noremap=true, silent=true }
vim.api.nvim_set_keymap('n', '<space>H', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
vim.api.nvim_set_keymap('n', '[e', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
vim.api.nvim_set_keymap('n', ']e', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
-- vim.api.nvim_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_key(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  -- buf_key('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_key('n', '<space>o', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_key('n', '<space>O', '<cmd>vs<CR><cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_key('n', '<space>g', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  -- buf_key('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  -- buf_key('n', '<space>g', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  -- buf_key('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_key('n', '<space>R', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_key('n', '<space>a', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_key('n', '<space>n', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_key('n', '<space>F', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

local cmp = require'cmp'

---             ---
--- completions ---
---             ---

cmp.setup({
  snippet = {
    expand = function(args)
      vim.fn["UltiSnips#Anon"](args.body)
    end,
  },
  mapping = {
    -- Enter immediately completes. C-n/C-p to select.
    ['<CR>'] = cmp.mapping.confirm({ select = true })
  },
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'ultisnips' },
  }, {
    { name = 'buffer' },
  })
})

-- Set configuration for specific filetype.
cmp.setup.filetype('gitcommit', {
  sources = cmp.config.sources({
    { name = 'cmp_git' },
  }, {
    { name = 'buffer' },
  })
})

-- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline('/', {
  sources = {
    { name = 'buffer' }
  }
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
  sources = cmp.config.sources({
    { name = 'path' }
  }, {
    { name = 'cmdline' }
  })
})

-- Setup lspconfig.
local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
local lspconfig = require'lspconfig'

---                       ---
--- Language Server Setup ---
---                       ---

lspconfig.tsserver.setup {
  capabilities = capabilities,
  on_attach = function(client, bufnr)
    client.resolved_capabilities.document_formatting = false
    on_attach(client, bufnr)
  end,
  flags = {
    debounce_text_changes = 150,
  }
}

local prettier = {{formatCommand = 'prettierd "${INPUT}"', formatStdin = true}}

lspconfig.efm.setup {
  capabilities = capabilities,
  on_attach = on_attach,
  flags = {
    debounce_text_changes = 150,
  },
  init_options = {documentFormatting = true},
  filetypes = {
      'javascript',
      'typescript',
      'html',
      'css',
      'scss',
      'less',
      'graphql',
      'markdown',
      'yaml',
      'json'
  },
  settings = {
      rootMarkers = {".git/"},
      languages = {
        javascript = prettier,
        typescript = prettier,
        html = prettier,
        css = prettier,
        scss = prettier,
        less = prettier,
        graphql = prettier,
        markdown = prettier,
        yaml = prettier,
        json = prettier
      }
  }
}

lspconfig.gopls.setup {
  capabilities = capabilities,
  on_attach = on_attach,
  flags = {
    debounce_text_changes = 150,
  }
}

lspconfig.clangd.setup {
  capabilities = capabilities,
  on_attach = on_attach,
  flags = {
    debounce_text_changes = 150,
  }
}

lspconfig.rust_analyzer.setup {
  capabilities = capabilities,
  on_attach = on_attach,
  flags = {
    debounce_text_changes = 150,
  },
  settings = {
    ["rust-analyzer"] = {
      cargo = {
        allFeatures = true,
      },
      completion = {
        postfix = {
          enable = false,
        },
      },
    },
  }
}

---            ---
--- Treesitter ---
---            ---

require'nvim-treesitter.configs'.setup {
  ensure_installed = {
    "bash",
    "css",
    "dockerfile",
    "go",
    "graphql",
    "html",
    "java",
    "javascript",
    "python",
    "rust",
    "toml",
    "tsx",
    "typescript",
    "c",
    "cpp",
    "yaml",
  },
  highlight = {enable = true},
}

---                  ---
--- Discord Presence ---
---                  ---

require("presence"):setup({
    -- General options
    auto_update         = true,
    neovim_image_text   = "extensible Vim-based text editor",
    main_image          = "neovim",
    client_id           = "793271441293967371",
    log_level           = nil,
    debounce_timeout    = 10,
    enable_line_number  = false,
    blacklist           = {},
    buttons             = false,
    file_assets         = {},

    editing_text        = "Editing %s",
    file_explorer_text  = "Browsing file tree",
    git_commit_text     = "Writing a Git commit",
    plugin_manager_text = "Managing plugins",
    reading_text        = "Reading %s",
    workspace_text      = "Working on %s",
    line_number_text    = "Line %s/%s",
})

---           ---
--- nvim-tree ---
---           ---

local tree_cb = require'nvim-tree.config'.nvim_tree_callback
require'nvim-tree'.setup {
  disable_netrw       = true,
  hijack_netrw        = true,
  open_on_setup       = false,
  ignore_ft_on_setup  = {},
  auto_close          = false,
  open_on_tab         = false,
  update_to_buf_dir   = {
    enable = true,
    auto_open = true,
  },
  hijack_cursor       = false,
  update_cwd          = false,
  filters = {
    dotfiles = true,
    custom   = {
      '.git',
      'node_modules',
      'dist',
      'package-lock.json',
      'yarn.lock',
      'target',
      'Cargo.lock',
    },
  },
  hide_dotfiles       = true,
  update_focused_file = {
    enable      = false,
    update_cwd  = false,
    ignore_list = {}
  },
  system_open = {
    cmd  = nil,
    args = {}
  },

  view = {
    width = 35,
    height = 30,
    side = 'left',
    auto_resize = false,
    mappings = {
      custom_only = true,
      list = {
        { key = {"<CR>", "o"}, cb = tree_cb("edit") },
        { key = "C",           cb = tree_cb("cd") },
        { key = "<C-v>",       cb = tree_cb("vsplit") },
        { key = "s"    ,       cb = tree_cb("vsplit") },
        { key = "<C-x>",       cb = tree_cb("split") },
        { key = "<C-t>",       cb = tree_cb("tabnew") },
        { key = "<",           cb = tree_cb("prev_sibling") },
        { key = ">",           cb = tree_cb("next_sibling") },
        { key = "U",           cb = tree_cb("parent_node") },
        { key = "x",           cb = tree_cb("close_node") },
        { key = "<Tab>",       cb = tree_cb("preview") },
        { key = "J",           cb = tree_cb("last_sibling") },
        { key = "H",           cb = tree_cb("toggle_dotfiles") },
        { key = "r",           cb = tree_cb("refresh") },
        { key = "a",           cb = tree_cb("create") },
        { key = "D",           cb = tree_cb("remove") },
        { key = "R",           cb = tree_cb("rename") },
        { key = "<C-r>",       cb = tree_cb("full_rename") },
        { key = "d",           cb = tree_cb("cut") },
        { key = "c",           cb = tree_cb("copy") },
        { key = "p",           cb = tree_cb("paste") },
        { key = "y",           cb = tree_cb("copy_name") },
        { key = "Y",           cb = tree_cb("copy_path") },
        { key = "gy",          cb = tree_cb("copy_absolute_path") },
        { key = "[c",          cb = tree_cb("prev_git_item") },
        { key = "]c",          cb = tree_cb("next_git_item") },
        { key = "u",           cb = tree_cb("dir_up") },
        { key = "q",           cb = tree_cb("close") },
        { key = "g?",          cb = tree_cb("toggle_help") },
      }
    }
  }
}
EOF
