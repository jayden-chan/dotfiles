set nocompatible

filetype off

" Plugins

    " Auto install vim-plugged if not already installed
    let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
    if empty(glob(data_dir . '/autoload/plug.vim'))
        silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
        autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
    endif

    call plug#begin('~/.local/share/nvim/plugged')

    " Theme
        Plug 'jayden-chan/gruvbox'
        Plug 'Yggdroot/indentline'
        Plug 'vim-airline/vim-airline'

    " fs nav
        Plug 'junegunn/fzf.vim'
        Plug 'kyazdani42/nvim-web-devicons'
        Plug 'kyazdani42/nvim-tree.lua'
        Plug 'airblade/vim-rooter'

    " Git
        Plug 'airblade/vim-gitgutter'
        Plug 'tpope/vim-fugitive'
        Plug 'tpope/vim-rhubarb'

    " Misc
        Plug 'godlygeek/tabular'
        Plug 'editorconfig/editorconfig-vim'
        Plug 'vimwiki/vimwiki'

    " IDE-like
        Plug 'neoclide/coc.nvim', {'branch': 'release'}
        let g:coc_global_extensions = [
                    \ 'coc-tsserver',
                    \ 'coc-rust-analyzer',
                    \ 'coc-clangd',
                    \ 'coc-json',
                    \ 'coc-eslint',
                    \ 'coc-prettier',
                    \ ]

        Plug 'jiangmiao/auto-pairs'
        Plug 'tpope/vim-commentary'
        Plug 'tpope/vim-surround'
        Plug 'SirVer/ultisnips'
        Plug 'rhysd/committia.vim'

    " Syntax
        Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
        Plug 'plasticboy/vim-markdown'
        Plug 'lifepillar/pgsql.vim'
        Plug 'jayden-chan/rust.vim'
        Plug 'baskerville/vim-sxhkdrc'
        Plug 'rrethy/vim-hexokinase', { 'do': 'make hexokinase' }
        Plug 'mustache/vim-mustache-handlebars'

    call plug#end()

" Behaviour

    " Theme
    syntax enable
    set encoding=UTF-8

    " 256 colors
    set t_Co=256
    set t_ut=
    set termguicolors

    set guifont=JetBrainsMono\ Nerd\ Font\ Mono:h12

    " Set dark gruvbox theme
    set background=dark

    " gruvbox settings
    let g:gruvbox_contrast_dark='hard'
    let g:gruvbox_sign_column='bg0'
    let g:gruvbox_italic=1
    let g:gruvbox_bold=1
    let g:gruvbox_underline=1
    let g:gruvbox_invert_selection=0
    let g:gruvbox_italicize_strings=1

    colorscheme gruvbox

    " Tab settings
    set expandtab
    set shiftwidth=4
    set softtabstop=4
    set tabstop=4
    set smarttab
    set smartindent

    " Use backspace
    set backspace=indent,eol,start

    " Search settings
    set gdefault           " Global by default
    set ignorecase         " Ignore case
    set smartcase          " Override ignorecase if search contains capitals
    set incsearch          " Search incrementally
    set nohls              " Don't highlight after Enter is pressed
    set inccommand=nosplit " Show find/replace as it is typed

    " Open new splits on the right
    set splitright

    " Fold settings
    set foldlevel=1000
    set foldmethod=expr
    set foldexpr=nvim_treesitter#foldexpr()

    set undolevels=9001
    set cursorline

    " No command bar
    set noshowmode

    " Hide ugly completion messages
    set shortmess+=c

    " Set git-gutter column to always on
    set signcolumn=yes

    " Don't let the cursor reach the top/bottom 8 lines of text
    set scrolloff=8

    " Don't automatically update working dir
    set noautochdir

    " Don't open preview windows
    set completeopt-=preview

    " Set .tex files to LaTeX syntax
    let g:tex_flavor="latex"

    " Unix file line endings
    set fileformat=unix

    " Enable mouse
    set mouse=a

    " Make LaTeX live preview & gitgutter smoother
    set updatetime=300

    " Change cursor to bar and underscore for different modes
    let &t_SI = "\<Esc>[6 q"
    let &t_SR = "\<Esc>[4 q"
    let &t_EI = "\<Esc>[2 q"

" Binds

    " Leader
    let mapleader = "\<Space>"

    " Relative line number toggle, toggle w/ F9
    set number relativenumber
    map <F9> <Esc>:set rnu!<CR>

    " Reload vimrc
    map <leader>ss :so $MYVIMRC<CR>

    " Map Ctrl-s to save
    nmap <c-s> :wa<CR>
    imap <c-s> <Esc>:wa<CR>

    " Spell check
    map <F6> :setlocal spell! spelllang=en_us<CR>
    set spellfile=$HOME/.config/dotfiles/vim/en.utf-8.add
    inoremap <c-o> <c-g>u<Esc>[s1z=`]a<c-g>u

    " Make Esc work in terminal mode, but not for fzf or rg
    tnoremap <Esc> <C-\><C-n>
    autocmd FileType fzf tnoremap <buffer> <Esc> <Esc>

    " ez semicolons & commas (perhaps the greatest binds in this entire config)
    inoremap ;; <Esc>A;
    nnoremap ;; <Esc>A;<Esc>
    inoremap ,, <Esc>A,
    nnoremap ,, <Esc>A,<Esc>

    " Formatting (remove whitespace and reindent)
    noremap <leader>ww :%s/\s\+$//e<CR>
    noremap <leader>tt mtgg=G`tzz
    noremap <silent> <leader>ta :Tabularize /<bar><CR>

    " Close quickfix/preview/location
    noremap <silent> <c-q> :ccl<bar>pcl<bar>lcl<CR>

    " Fuzzy finding
    nnoremap <silent> <leader>f :FZ<CR>
    nnoremap <silent> <leader>r :Rg<CR>

    " Remap cursor movement keys because I'm a scrub and don't use the default
    noremap h i
    noremap j h
    noremap k gj
    noremap i gk

    " Various other cursor control maps
    nnoremap L g$
    nnoremap J g^
    vnoremap L $
    vnoremap J ^
    nnoremap I 12<c-u>
    nnoremap K 12<c-d>
    vnoremap I 12<up>
    vnoremap K 12<down>
    nnoremap U J

    " Make X and Y behave like C and D
    nnoremap Y y$
    nnoremap X v$<Left>"_x

    " Open a new terminal window
    nnoremap <silent> <leader>e :below new<bar>terminal<CR>

    " F10 shows the color group of the symbol below the cursor
    map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
    \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
    \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

    " Change splits
    nnoremap <leader>j <C-w>h
    nnoremap <leader>k <C-w>j
    nnoremap <leader>i <C-w>k
    nnoremap <leader>l <C-w>l

    " Move the cursor more easily while in insert mode
    inoremap <c-j> <Left>
    inoremap <c-l> <Right>

    " Easily resize splits
    nnoremap <c-i> :resize -2<CR>
    nnoremap <c-k> :resize +2<CR>
    nnoremap <c-j> :vertical resize +5<CR>
    nnoremap <c-l> :vertical resize -5<CR>

    " Make c-p function like c-i since c-i was previously remapped
    nnoremap <c-p> <c-i>

    " <leader><leader> toggles between buffers
    nnoremap <leader><leader> <c-^>

    " Disable Ex mode
    map q: <nop>
    map Q <nop>

    " Used for centering text in the 'thicc' comments
    map <c-m> ^f*a<Space><Esc>f*h<Space><Esc>^

    " New line no insert mode
    map go o<Esc>

    " Copy Paste etc from system clipboard
    map <silent> <leader>p "+p
    map <silent> <leader>y "+y

    " Delete line without filling yank buffer
    nnoremap <silent> <leader>dd "_dd
    vnoremap <silent> <leader>dd "_dd

    " Prevent x and c from filling buffer
    noremap x "_x
    noremap c "_c
    noremap cc "_cc

    " Tab switching
    nmap <silent> <tab>j :tabprevious<CR>
    nmap <silent> <tab>l :tabnext<CR>

    " Fix 'I' behaviour in V-block
    vnoremap H I

    " Select whole function
    map <silent> <leader>V V/^}<CR>

    " Toggle highlight search
    map <silent> <leader>h :set hls!<CR>

" Plugin specific settings

    let myWiki = {}
    let myWiki.path = '~/Documents/Git/wiki/wiki'
    let myWiki.path_html = '~/Documents/Git/wiki/html'
    let myWiki.automatic_nested_syntaxes = 1
    let myWiki.auto_export = 1
    let myWiki.auto_toc = 0
    let g:vimwiki_list = [myWiki]
    let g:vimwiki_global_ext = 0

    nmap <Leader>wi <Plug>VimwikiIndex
    nmap <Leader>F  <Plug>VimwikiToggleListItem
    vmap hl         <Plug>VimwikiTextObjListSingleV
    vmap hc         <Plug>VimwikiTextObjColumnInnerV
    vmap h\         <Plug>VimwikiTextObjTableCellInnerV
    vmap hH         <Plug>VimwikiTextObjHeaderSubContentV
    vmap hh         <Plug>VimwikiTextObjHeaderContentV

    let g:UltiSnipsExpandTrigger="<tab>"
    let g:UltiSnipsJumpForwardTrigger="<tab>"

    let g:airline_powerline_fonts = 1
    let g:airline_section_c = '%t'

    nnoremap <silent> <C-n> :NvimTreeToggle<CR>
    highlight NvimTreeIndentMarker guifg='#665c54'
    let g:nvim_tree_hide_dotfiles = 1
    let g:nvim_tree_disable_default_keybindings = 1
    let g:nvim_tree_indent_markers = 1
    let g:nvim_tree_width = 35
    let g:nvim_tree_ignore = [
        \ '.git',
        \ 'node_modules',
        \ 'dist',
        \ 'package-lock.json',
        \ 'yarn.lock',
        \ 'target',
        \ 'Cargo.lock',
        \ ]

    let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']
    au FileType gitcommit,text,markdown,tex let b:EditorConfig_disable = 1

    command! -nargs=0 Prettier :CocCommand prettier.formatFile
    autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.scss,*.json,*.html, Prettier

    command! -nargs=0 AutoFormat :call CocAction('format')
    autocmd BufWritePre *.c,*.cpp,*.h,*.hpp, AutoFormat

    let g:rooter_patterns = ['.git']
    let g:rooter_manual_only = 1

    let g:gitgutter_map_keys = 0

    nnoremap <silent> ]c :GitGutterNextHunk<CR>
    nnoremap <silent> [c :GitGutterPrevHunk<CR>
    nnoremap <leader>u   :GitGutterUndoHunk<CR>
    nnoremap <silent> <leader>q :GitGutterPreviewHunk<CR>

    let g:indentLine_char = 'â”‚'

    let g:rustfmt_autosave = 1

    nmap <silent> ]e <Plug>(coc-diagnostic-next)
    nmap <silent> [e <Plug>(coc-diagnostic-prev)
    nmap <silent> <leader>o <Plug>(coc-definition)
    nmap <silent> <leader>O :vs<CR><Plug>(coc-definition)
    nmap <silent> <leader>n <Plug>(coc-references)
    nmap <silent> <leader>R <Plug>(coc-rename)
    nmap <silent> <leader>a <Plug>(coc-codeaction)

    nnoremap <silent> <leader>I :CocList diagnostics<CR>
    nnoremap <silent> <leader>b :CocList -I symbols<CR>

    " Show documentation in preview window
    nnoremap <silent> <leader>g :call <SID>show_documentation()<CR>

    function! s:show_documentation()
        if (index(['vim','help'], &filetype) >= 0)
            execute 'h '.expand('<cword>')
        else
            call CocAction('doHover')
        endif
    endfunction

    " Prevent coc from auto assigning these to stupid binds
    vmap <silent> <leader>F21 <Plug>(coc-funcobj-i)
    vmap <silent> <leader>F22 <Plug>(coc-funcobj-a)
    omap <silent> <leader>F23 <Plug>(coc-funcobj-i)
    omap <silent> <leader>F24 <Plug>(coc-funcobj-a)

    " Make ripgrep fzf search ignore text from filenames (why isn't this the default...?)
    command! -bang -nargs=* Rg call
                \ fzf#vim#grep(
                \"rg --column --line-number --no-heading --color=always --smart-case ".shellescape(<q-args>),
                \1,
                \{'options': '--delimiter : --nth 4..'},
                \<bang>0
                \)

    let g:sql_type_default = 'pgsql'

    let g:tex_conceal = ''
    let g:vim_markdown_conceal = 0
    let g:vim_markdown_conceal_code_blocks = 0

" Commands

    " Make leaving easier in case of typos
    command! -bang Q :q<bang>
    command! Wq :wq
    command! WQ :wq
    command! Wqa :wqa
    command! WQa :wqa
    command! WQA :wqa
    command! -bang Qa :qa<bang>
    command! -bang QA :qa<bang>

    command! RustDocs :silent !rustup doc --std

    " Enable spell check for certain file types
    autocmd FileType gitcommit,text,markdown,tex,cucumber setlocal spell

    " Set a max line length for Markdown files
    autocmd FileType markdown setlocal textwidth=89
    autocmd FileType markdown setlocal colorcolumn=90

    " Set indentation to 2 spaces for certain files
    autocmd FileType javascript,typescript,typescriptreact,html,scss,css,less,json,toml,sql,yml,yaml,groovy setlocal shiftwidth=2
    autocmd FileType javascript,typescript,typescriptreact,html,scss,css,less,json,toml,sql,yml,yaml,groovy setlocal softtabstop=2

    " Enter insert mode automatically when entering terminal
    autocmd BufWinEnter,WinEnter term://* startinsert

    au BufRead,BufNewFile *.tdg setf tdg
    au BufRead,BufNewFile Jenkinsfile setf groovy
    au BufRead,BufNewFile *.graphql setf graphql

    " Set indentation to hard tabs for some files
    autocmd FileType snippets,go setlocal tabstop=4
    autocmd FileType snippets,go setlocal shiftwidth=4
    autocmd FileType asm         setlocal shiftwidth=8
    autocmd FileType asm         setlocal expandtab
    autocmd FileType go          setlocal noexpandtab

    " Easily open corresponding source file (C/C++)
    autocmd FileType c,cpp nmap <silent> <leader>v :CocCommand clangd.switchSourceHeader<CR>

" Abbreviations

    iab retrun   return
    iab rerturn  return
    iab rertrun  return
    iab retnru   return
    iab retunr   return
    iab erturn   return
    iab ertnru   return
    iab thsi     this
    iab fcuntoin function
    iab functoin function
    iab fucntion function
    iab funcotin function
    iab funcoitn function
    iab funciton function
    iab funciotn function
    iab fcuntion function
    iab fynction function
    iab versoin  version
    iab veison   version
    iab vreison  version
    iab vierson  version
    iab costn    const
    iab conts    const
    iab csont    const
    iab cosnt    const
    iab asunyc   async
    iab ascyn    async
    iab asunc    async
    iab asuyuc   async
    iab THe      The
    iab THis     This
    iab !+       !=
    iab +>       =>

" Lua plugins config

lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = {
    "typescript",
    "javascript",
    "tsx",
    "graphql",
    "rust",
    "toml",
    "go",
    "css",
    "python",
    "yaml",
    "java",
    "html",
    "dockerfile",
  },
  highlight = {enable = true},
}

local tree_cb = require'nvim-tree.config'.nvim_tree_callback
-- default mappings
vim.g.nvim_tree_bindings = {
  { key = {"<CR>", "o"}, cb = tree_cb("edit") },
  { key = "C",           cb = tree_cb("cd") },
  { key = "<C-v>",       cb = tree_cb("vsplit") },
  { key = "s"    ,       cb = tree_cb("vsplit") },
  { key = "<C-x>",       cb = tree_cb("split") },
  { key = "<C-t>",       cb = tree_cb("tabnew") },
  { key = "<",           cb = tree_cb("prev_sibling") },
  { key = ">",           cb = tree_cb("next_sibling") },
  { key = "U",           cb = tree_cb("parent_node") },
  { key = "x",           cb = tree_cb("close_node") },
  { key = "<Tab>",       cb = tree_cb("preview") },
  { key = "J",           cb = tree_cb("last_sibling") },
  { key = "H",           cb = tree_cb("toggle_dotfiles") },
  { key = "r",           cb = tree_cb("refresh") },
  { key = "a",           cb = tree_cb("create") },
  { key = "D",           cb = tree_cb("remove") },
  { key = "R",           cb = tree_cb("rename") },
  { key = "<C-r>",       cb = tree_cb("full_rename") },
  { key = "d",           cb = tree_cb("cut") },
  { key = "c",           cb = tree_cb("copy") },
  { key = "p",           cb = tree_cb("paste") },
  { key = "y",           cb = tree_cb("copy_name") },
  { key = "Y",           cb = tree_cb("copy_path") },
  { key = "gy",          cb = tree_cb("copy_absolute_path") },
  { key = "[c",          cb = tree_cb("prev_git_item") },
  { key = "]c",          cb = tree_cb("next_git_item") },
  { key = "u",           cb = tree_cb("dir_up") },
  { key = "q",           cb = tree_cb("close") },
  { key = "g?",          cb = tree_cb("toggle_help") },
}
EOF
